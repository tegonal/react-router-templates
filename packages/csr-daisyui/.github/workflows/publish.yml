name: Build and publish docker images

on:
  push:
    tags:
      - '**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@3d100841f68d4548bf57e52eb27bd33ec5069f55
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@be19121bfd18b9c1ac415d9571d4f67b9b357886
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

#  notify:
#    needs: build-and-push
#    if: always()
#    runs-on: ubuntu-latest
#    steps:
#      - name: Set Status Message
#        id: set_status
#        shell: bash
#        run: |
#          if [ "${{ needs.build-and-push.result }}" == "success" ]; then
#            echo "STATUS_MESSAGE=Successfully built and pushed the docker image ${{ steps.meta.outputs.tags }} ${{ steps.meta.outputs.labels }} :white_check_mark:" >> $GITHUB_ENV
#          else
#            echo "STATUS_MESSAGE=:boom: :boom: :boom: Building the docker image failed, more information is available in the GitHub action logs." >> $GITHUB_ENV
#          fi
#
#      - name: Mattermost Notification
#        uses: mattermost/action-mattermost-notify@master
#        with:
#          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
#          TEXT: |
#            This is a message from ${{ github.repository }}.
#            [Pipeline](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}): ${{ env.STATUS_MESSAGE }}
#          MATTERMOST_USERNAME: ${{ github.triggering_actor }}
